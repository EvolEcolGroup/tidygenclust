---
title: "Overview of tidygenclust"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{overview}
  %\VignetteEncoding{UTF-8}
  %\VignetteEngine{knitr::rmarkdown}
editor_options: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Using `tidygenclust` for clustering in R

`tidygenclust` provides functions and methods to run genetic clustering
in R, using the commonly used ADMIXTURE program, as well as the python
package `fastmixture`. It also helps to align and compare multiple runs
of the same or different K using the functionalities of the python
package `Clumppling`. This package builds on `tidypopgen`, enhancing the
grammar of population genetics with a focus on genetic clustering.

`fastmixture` (<https://github.com/Rosemeis/fastmixture>) (Santander et
al. 2024) is a python tool for ancestry estimation using genotype data.
It uses a model-based approach with comparable accuracy to that of of
popular clustering tool ADMIXTURE, but over considerably faster time
scales making it a more scaleable option for large genetic data sets.

`Clumppling` (<https://github.com/PopGenClustering/Clumppling>) (Liu, 
Kopelman, & Rosenberg, 2024) is a python package which aligns multiple runs of 
a clustering analyses allowing for easy comparison and summary of clustering 
results both across different values of K and for repeated runs within K. 

With the `tidygenclust` package we provide a direct R interface to the
python based `fastmixture` using `reticulate` and integrate it with the 
`tidypopgen` package for easy genetic data manipulation entirely within R. 
Additionally, the outputs from clustering analyses (irrespective of
the algorithm used) can be easily visualised using the `gt_clumppling`
function, which allows for easy alignment and comparison of multiple
clustering results.

Genetic data analyses through the integration of `tidypopgen` and
`tidygenclust` seamlessly joins upstream genetic data manipulation
(`tidypopgen`) with downstream clustering analyses and extensive
visualisation options of the clustering results (`tidygenclust`) in an
integrated pipeline all natively within R.

# Installation

We use `reticulate` to seamlessly integrate the required python packages
into R, this means that you, as a user, should not need to worry about
the details of the python packages or dependencies.

The first time we run `tidygenclust`, we need to install the python
packages. We can do this by simply running the following commands:

```{r}
library(tidygenclust)
```

```{r eval=FALSE}
tgc_tools_install()
```

# An example workflow

To explore the use of `tidygenclust` with `tidypopgen`, we will
investigate the genetic ancestry of the anolis lizard *Anolis punctatus*
across its range in South America, using data from Prates et al 2018.

We downloaded the vcf file of the genotype data from the Prates et al
2018 GitHub repository which can be accessed
[here](%22%3Chttps://github.com/ivanprates/2018_Anolis_EcolEvol/blob/master/data/VCFtools_SNMF_punctatus_t70_s10_n46/punctatus_t70_s10_n46_filtered.recode.vcf?raw=true%3E%22)
and compressed it to a vcf.gz file.

## Read data into `gen_tibble` format

First, using `tidypopgen` we can read our compressed vcf file directly
into R to create our `gen_tibble`:

```{r}
library(tidypopgen)
vcf_path <- system.file(
  "/extdata/anolis/punctatus_t70_s10_n46_filtered.recode.vcf.gz",
  package = "tidypopgen"
)
anole_gt <- gen_tibble(vcf_path,
  quiet = TRUE, backingfile = tempfile("anolis_"),
  parser = "cpp"
)
```

By inspecting our `gen_tibble` we can see that we have a total of 46
individuals and 3249 loci, but no population information attached yet:

```{r}
anole_gt
```

We can easily attach the population metadata to our `gen_tibble` which
is stored in anther file that can be found on the Prates et al 2018
GitHub repository
[here](%22%3Chttps://github.com/ivanprates/2018_Anolis_EcolEvol/raw/master/data/plot_order_punctatus_n46.csv%3E).

We can read this file into R and attach the population information to
our `gen_tibble`:

```{r}
pops_path <- system.file("/extdata/anolis/punctatus_n46_meta.csv",
  package = "tidypopgen"
)
pops <- readr::read_csv(pops_path)

anole_gt <- anole_gt %>% left_join(pops, by = "id")
```

Now we can inspect the `gen_tibble` object again to see that the
population information has been added to our genotypes:

```{r}
anole_gt
```

Finally, we group our `gen_tibble` by population to make it easier to
plot later, as the grouping information will be passed to objects
created by clustering algorithms:

```{r}
anole_gt <- anole_gt %>% group_by(population)
```

## Data preparation and PCA

To get an initial idea of our data and potentially help choose a
reasonable starting value for K we may want to run a principal
component analyses (PCA) to explore the data prior to running the
`fastmixture` analyses.

Before running the PCA we also need to impute any missing values that
may be present in our data.

We can quickly and easily impute and perform a PCA on our `gen_tibble`
with `tidypopgen`:

```{r}
anole_gt <- anole_gt %>% gt_impute_simple(method = "mode")

anole_pca <- anole_gt %>% gt_pca_partialSVD(k = 2)

library(ggplot2)
anole_pca %>% autoplot(type = "scores") +
  aes(color = anole_gt$population) +
  labs(color = "Population")
```

From the PCA plot we can see that the Amazonian forest and Atlantic forest 
populations separate quite clearly. Additionally, whilst the Atlantic forest 
individuals cluster tightly together the Amazonian forest individuals
are quite spread indicating three major clusters in the anolis.

## Running the fastmixture algorithm

Now we can run `gt_fastmixture` on our `gen_tibble` objec t(note that
`gt_fastmixture` can also work directly on a PLINK bed file).

As a minimum the `gt_fastmixture` command requires you to supply your
input data, in this case a `gen_tibble`, and specify a value for the
number of clusters K.

Based on our PCA results K = 3 may be a good place to start:

```{r}
anole_res <- anole_gt %>% gt_fastmixture(k = 3)
```

This will *very* quickly return a single Q matrix, for one specified K
value. But, most likely we want to explore multiple values for K and
should run multiple repeats of each K to assess the stability of the
clustering. The `gt_fastmixture` function allows you to specify a vector
of K values you wish to run and the number of repeats per K value.

Now we are doing multiple repeat runs it is also important that for each
repeat we specify a different seed number to ensure consistent and
robust results.

Let's now set values of K from 2 to 4 and run 3 repeats of each K
value, setting a different random seed for each repeat. We also set the
option `no_freqs` to `FALSE` to include P-matrices, containing ancestral
allele frequencies, to our output:

```{r, results='hide'}
anole_res <- anole_gt %>% gt_fastmixture(
  k = c(2:4), n_runs = 3,
  seed = c(42, 2, 16), no_freqs = FALSE
)
```

Our results are returned as a `gt_admix` object which neatly packages
the outputted Q matrices, and the corresponding K value for that run
in a structured list.

We can get a summary of our `gt_admix` results object to see exactly
what it contains:

```{r}
anole_res %>% summary()
```

From the summary we can see our `gt_admix` object contains Q and P
matrices for 3 repeat runs of K values 2, 3 and 4 as expected.

We may want to inspect a specific Q or P matrix in our `gt_admix` object
and this can be done using the `get_q_matrix` or `get_p_matrix`
functions, we simply need to specify the K value and the repeat run
number we are interested in.

For example we can view the Q matrix corresponding to the second run of
K = 4 like so:

```{r}
anole_res %>%
  get_q_matrix(k = 4, run = 2) %>%
  head()
```

Or the P matrix of the first run of K = 3:

```{r}
anole_res %>%
  get_p_matrix(k = 3, run = 1) %>%
  head()
```

## Visualising the results

For a quick visualisation of a single Q matrix we can use the autoplot
function in `tidypopgen`:

```{r}
anole_res %>% autoplot(type = "barplot", k = 3, run = 1)
```

It is possible to rearrange individual within groups according to their
ancestral components. This makes for a visually appealing plots that
focuses on the main ancestral component within each plot, but makes
multiple plots not comparable (as individuals will not be in the same
order across plots):

```{r}
anole_res %>% autoplot(
  type = "barplot", k = 3, run = 1,
  reorder_within_groups = TRUE
)
```

Note that the colours assigned to each component are arbitrary and may
(and in this case did) change if we reorder individuals. If you want
complete control of your plot, you can create your own customised plot
with `ggplot2`; we can use `tidy()` to easily extract the required
information from a `gt_admix` object to use for the plot:

```{r}
anole_q_tbl <- anole_res %>%
  get_q_matrix(k = 3, run = 1) %>%
  tidy(data = anole_gt)
anole_q_tbl
```

In the Prates et al 2018 study, the anolis lizards were found to split into three 
genetic groups, two in the Amazonian forest; the Eastern Amazonia (Eam) and Western 
Amazonia (Wam) and one in the Atlantic Forest (AF).

If we wanted to change the grouping variable of our plot to match these groups
we can use the `gt_admix_reorder_q` function which will reorder the Q matrix by a 
chosen grouping variable. Our metadata contains this new grouping information
in the column `pop`:

```{r}
anole_gt_admix <- anole_res %>% gt_admix_reorder_q(group = anole_gt$pop)
```

We can then visualise our results again with this new grouping:

```{r}
anole_gt_admix %>% autoplot(
  type = "barplot", k = 3, run = 1,
  reorder_within_groups = TRUE
)
```


## Visualisations with `gt_clumppling`

Whilst this gives us a useful, quick visual to check one particular Q
matrix, ideally we want to be able to compare the different K values
we tried in our clustering analyses and to assess the stability of the
multiple repeat runs. For proper comparative visualisation and
assessment of the different K values and repeats we can use the
`gt_clummpling` function which aligns multiple clustering results within
and between different values of K and allows for easy visualisation in
multipartite plots.

Once we use `gt_clumppling`, the resulting plots will only show
individuals in the order in which they were found in the `gt_admix`
object. This means that, if they were not ordered into groups, we will
not be able to annotate groups. One solution would be to arrange our
original gen_tibble by group before starting the analysis, but we can
also use `gt_admix_reorder_q` to reorder the individuals in the groups  
which we have done in the previous step.

Now let's run the `Clumppling` analysis on our `gt_admix` object:

```{r}
anole_clump <- anole_gt_admix %>% gt_clumppling()
```

Now we can visualise the aligned Q matrices for each value of K we tried:

```{r}
anole_clump %>% autoplot(type = "all_modes", group = anole_gt_admix$group)
```

We can see that for the anolis dataset there is only one mode for each
value of K. For a more complex example, where multiple modes are found in runs 
of the same K, we can explore a dataset investigating the the ancestry of 
Cape Verde individuals, the same example used in the `Clumppling` manual. 

This time we will read in the Q matrices directly from a directory. The text files
containing the matrices are stored as a zip archive, which we can pass directly 
to `gt_clumppling()`:

```{r load_capeverde}
input_path <- system.file("extdata/capeverde.zip", package = "tidygenclust")
clump_res <- input_path %>% gt_clumppling()
```

Once we have a `gt_clumppling` results object, we can use `autoplot` to make a 
number of default plots. 

We can plot the modes for all values of k with:

```{r}
clump_res %>% autoplot(type = "all_modes")
```

It is often informative to overlay information on the population from which each individual
was sampled. This can be done by providing a vector of population labels for each individual.
In the case of the Cape Verde dataset, we have such a vector stored in the package:

```{r}
capeverde_pops %>% head()
```

Let's get a summary:

```{r}
capeverde_pops %>% table()
```

We can now add it to our plots with the `group` argument:

```{r}
clump_res %>% autoplot(type = "all_modes", group = capeverde_pops)
```

And subset our visualisation to only the major modes with:

```{r}
clump_res %>% autoplot(type = "major_modes", group = capeverde_pops)
```

The modes of a specific k value can be plotted with:

```{r}
clump_res %>% autoplot(type = "modes_within_k", k = 4, group = capeverde_pops)
```

We can also visualise the relationship among modes by plotting over a 
multipartite graph, where better alignment between the modes is indicated by the
darker color of the edges connecting their structure plots (i.e edges with a 
lower cost of optimal alignment are labelled on each edge):

```{r}
clump_res %>% autoplot(type = "modes", group = capeverde_pops)
```

`gt_clumppling` can also deal with very large K values and gaps in the K 
values explored. 

For example, we can use the 'chicken_gapK' data example also from `Clumppling`,
which uses outputs from STRUCTURE (so we need to specify the `input_format`):

```{r load_chicken}
input_path <- system.file("extdata/chicken_gapk.zip", package = "tidygenclust")
chicken_res <- input_path %>% gt_clumppling(input_format = "structure")
```

We can plot the membership plots on top of the multipartite plot with:

```{r}
chicken_res %>% autoplot()
```

## Making custom plots with `ggplot2`

If we want to customise the default plots, we can use `tidy()` to easily extract 
the required information from a `gt_clumppling` object. 

To get all the modes for each k, we use:

```{r}
clump_res %>% tidy(matrix = "modes")
```

The major modes can be obtained simply with:

```{r}
clump_res %>% tidy(matrix = "major_modes")
```

To create custom plots, we can also extract the Q matrices for modes, with their 
clusters aligned, by typing:

```{r}
q_modes <- clump_res %>% tidy(matrix = "Q_modes")
```

`q_modes` is a list of tibbles, one per mode:

```{r}
q_modes %>% names()
```

If we only want the major modes, we can simply use:

```{r}
q_major_modes <- clump_res %>% tidy(matrix = "Q_major_modes")
q_major_modes %>% names()
```

Let us inspect one of the tidied modes:

```{r}
q4_tidied <- q_major_modes[["K4M1"]]
q4_tidied %>% head()
```

We can now create a simple plot of this mode with:

```{r}
library(ggplot2)
# set up the ggplot object
plt <- q4_tidied %>% ggplot(
  aes(
    x = id,
    y = percentage,
    fill = q
  )
) +
  # add the columns based on percentage membership to each cluster
  geom_col(
    width = 1,
    position = position_stack(reverse = TRUE)
  ) +
  # set the y label
  labs(y = "K = 4") +
  # use a theme to match the distruct look, removing most decorations
  theme_distruct() +
  # set the colour scale to be the same as in distruct and clumppling
  scale_fill_distruct()

plt
```

We used a preset theme and colour scale, but you could use any custom option
you prefer by using standard `ggplot2` theme and scale_fill options. 
For example:

```{r}
plt + scale_fill_viridis_d(guide = "none")
```
